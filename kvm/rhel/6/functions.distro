# -*-Shell-script-*-
#
# requires:
#  bash
#  yum, chkconfig, pwconv, chroot
#  mkdir, cp, rm, rsync, find
#  egrep, xargs
#

function repofile() {
  local reponame=$1 baseurl=$2 gpgkey=$3 keepcache=$4
  cat <<-EOS
	[main]
	cachedir=/var/cache/yum
	keepcache=${keepcache}
	debuglevel=2
	logfile=/var/log/yum.log
	exactarch=1
	obsoletes=1
	gpgcheck=0
	plugins=1
	metadata_expire=1800
	installonly_limit=2
	
	# PUT YOUR REPOS HERE OR IN separate files named file.repo
	# in /etc/yum.repos.d
	[${reponame}]
	name=${reponame}
	failovermethod=priority
	baseurl=${baseurl}
	enabled=1
	gpgcheck=1
	gpgkey=${gpgkey}
	EOS
}

function yum_install() {
  local chroot_dir=$1 reponame=$2 baseurl=$3 gpgkey=$4 keepcache=$5
  [[ -d "${chroot_dir}" ]] || { echo "directory not found: ${chroot_dir}" >&2; return 1; }
  local tmpdir=${chroot_dir}/tmp
  local repofile=${tmpdir}/yum-${reponame}.repo
  local yum_cmd="
     yum
     -c ${repofile} \
     --disablerepo="\*" \
     --enablerepo="${reponame}" \
     --installroot=${chroot_dir} \
     -y
  "
  mkdir ${tmpdir}
  repofile ${reponame} ${baseurl} ${gpgkey} ${keepcache} > ${repofile}
  ${yum_cmd} groupinstall Core
  ${yum_cmd} install \
             kernel dracut openssh openssh-clients openssh-server rpm yum curl dhclient \
             passwd grub \
             vim-minimal
  ${yum_cmd} erase selinux*
}

function install_fstab() {
  local chroot_dir=$1
  [[ -d "${chroot_dir}" ]] || { echo "directory not found: ${chroot_dir}" >&2; return 1; }
  cat <<-EOS > ${chroot_dir}/etc/fstab
	${root_dev}             /                       ext4    defaults        1 1
	tmpfs                   /dev/shm                tmpfs   defaults        0 0
	devpts                  /dev/pts                devpts  gid=5,mode=620  0 0
	sysfs                   /sys                    sysfs   defaults        0 0
	proc                    /proc                   proc    defaults        0 0
	EOS
}

function install_networking() {
  local chroot_dir=$1
  [[ -d "${chroot_dir}" ]] || { echo "directory not found: ${chroot_dir}" >&2; return 1; }
  cat <<-EOS > ${chroot_dir}/etc/hosts
	127.0.0.1       localhost
	EOS
  cat <<-EOS > ${chroot_dir}/etc/resolv.conf
	nameserver 8.8.8.8
	EOS
  cat <<-EOS > ${chroot_dir}/etc/sysconfig/network
	NETWORKING=yes
	EOS
  cat <<-EOS > ${chroot_dir}/etc/sysconfig/network-scripts/ifcfg-eth0
	DEVICE=eth0
	BOOTPROTO=dhcp
	ONBOOT=yes
	EOS
}

function update_passwords() {
  local chroot_dir=$1
  [[ -d "${chroot_dir}" ]] || { echo "directory not found: ${chroot_dir}" >&2; return 1; }
  chroot ${chroot_dir} pwconv
  chroot ${chroot_dir} bash -c "echo root:root | chpasswd"
}

function set_timezone() {
  local chroot_dir=$1
  [[ -d "${chroot_dir}" ]] || { echo "directory not found: ${chroot_dir}" >&2; return 1; }
  cp ${chroot_dir}/usr/share/zoneinfo/Japan ${chroot_dir}/etc/localtime
}

function prevent_daemons_starting() {
  local chroot_dir=$1
  [[ -d "${chroot_dir}" ]] || { echo "directory not found: ${chroot_dir}" >&2; return 1; }
  while read svc dummy; do
    chroot ${chroot_dir} chkconfig --del ${svc}
  done < <(chroot ${chroot_dir} chkconfig --list | egrep -v :on)
}

function install_grub() {
  local chroot_dir=$1
  [[ -d "${chroot_dir}" ]] || { echo "directory not found: ${chroot_dir}" >&2; return 1; }
  for grub_distro_name in redhat unknown; do
    grub_src_dir=${chroot_dir}/usr/share/grub/${basearch}-${grub_distro_name}
    [ -d ${grub_src_dir} ] || continue
    rsync -a ${grub_src_dir}/ ${chroot_dir}/boot/grub/
  done
}

function cleanup() {
  local chroot_dir=$1
  [[ -d "${chroot_dir}" ]] || { echo "directory not found: ${chroot_dir}" >&2; return 1; }
  find   ${chroot_dir}/var/log/ -type f | xargs rm
  rm -rf ${chroot_dir}/tmp/*
}

function install_bootloader() {
  local chroot_dir=$1 disk_filename=$2
  [[ -d "${chroot_dir}" ]] || { echo "directory not found: ${chroot_dir}" >&2; return 1; }
  [[ -a ${disk_filename} ]] || { echo "file not found: ${disk_filename}" >&2; return 1; }
  local tmpdir=/tmp/vmbuilder-grub
  mkdir -p ${chroot_dir}/${tmpdir}

  is_dev ${disk_filename} || {
    local new_filename=${tmpdir}/$(basename ${disk_filename})
    touch ${chroot_dir}/${new_filename}
    mount --bind ${disk_filename} ${chroot_dir}/${new_filename}
  }

  local grub_id=0
  local devmapfile=${tmpdir}/device.map
  touch ${chroot_dir}/${devmapfile}
  printf "[INFO] Generating %s\n" ${devmapfile}
  {
    is_dev ${disk_filename} && {
      printf "(hd%d) %s\n" ${grub_id} ${disk_filename}
    } || {
      printf "(hd%d) %s\n" ${grub_id} ${new_filename}
    }
  } >> ${chroot_dir}/${devmapfile}
  cat ${chroot_dir}/${devmapfile}

  printf "[INFO] Installing grub\n"
  local grub_cmd=
  is_dev ${disk_filename} && {
    grub_cmd="grub --device-map=${chroot_dir}/${devmapfile} --batch"
  } || {
    grub_cmd="chroot ${chroot_dir} grub --device-map=${devmapfile} --batch"
  }
  cat <<-_EOS_ | ${grub_cmd}
	root (hd${grub_id},0)
	setup (hd0)
	quit
	_EOS_

  printf "[INFO] Generating /boot/grub/grub.conf\n"
  local bootdir_path=/boot
  xptabinfo | egrep -q /boot && {
    bootdir_path=
  }
  cat <<-_EOS_ > ${chroot_dir}/boot/grub/grub.conf
	default=0
	timeout=5
	splashimage=(hd${grub_id},0)${bootdir_path}/grub/splash.xpm.gz
	hiddenmenu
	title ${distro} ($(cd ${chroot_dir}/boot && ls vmlinuz-* | tail -1 | sed 's,^vmlinuz-,,'))
	        root (hd${grub_id},0)
	        kernel ${bootdir_path}/$(cd ${chroot_dir}/boot && ls vmlinuz-* | tail -1) ro root=UUID=$(ppartuuid ${disk_filename} root) rd_NO_LUKS rd_NO_LVM LANG=en_US.UTF-8 rd_NO_MD SYSFONT=latarcyrheb-sun16 crashkernel=auto  KEYBOARDTYPE=pc KEYTABLE=us rd_NO_DM
	        initrd ${bootdir_path}/$(cd ${chroot_dir}/boot && ls initramfs-*| tail -1)
	_EOS_
  cat ${chroot_dir}/boot/grub/grub.conf
  cd ${chroot_dir}/boot/grub
  ln -fs grub.conf menu.lst
  cd -

  is_dev ${disk_filename} || {
    printf "[DEBUG] Unmounting %s\n" ${chroot_dir}/${new_filename}
    umount ${chroot_dir}/${new_filename}
  }

  printf "[DEBUG] Deleting %s\n" ${chroot_dir}/${tmpdir}
  rm -rf ${chroot_dir}/${tmpdir}
}

function is_dev() {
  local disk_filename=$1 mountpoint=$2
  # do not use "-a" in this case.
  [[ -n ${disk_filename} ]] || { echo "file not found: ${disk_filename}" >&2; return 1; }
  case "${disk_filename}" in
  /dev/*) return 0 ;;
       *) return 1 ;;
  esac
}
